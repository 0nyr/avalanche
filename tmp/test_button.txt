// [ text aligned on center of the box ]
//declare text
sf::Text text2;
text2.setFont(font);
text2.setString("RANDOMTEXT");
text2.setCharacterSize(24);
text2.setFillColor(sf::Color::Magenta);
text2.setStyle(sf::Text::Regular);

//center text
sf::FloatRect textRect2 = text2.getLocalBounds();
text2.setOrigin(
    textRect2.left + textRect2.width/2.0f,
    textRect2.top  + textRect2.height/2.0f
);
text2.setPosition(sf::Vector2f(1000.f/2.0f,1000.f/2.0f));
window.draw(text2);







// Version using sf::Texture
// button test
sf::RenderTexture buttonTexture;
buttonTexture.create(200, 100);
renderTexture.clear(sf::Color::Green);

// draw box
sf::RectangleShape buttonShape = sf::RectangleShape(
    (sf::Vector2f)(buttonTexture.getSize())
);
buttonShape.setFillColor(sf::Color::Yellow);
buttonShape.setPosition(0, 0);
buttonTexture.draw(buttonShape);

// draw text
sf::Text buttonText;
buttonText.setFont(font);
buttonText.setString("BUTTON");
buttonText.setCharacterSize(24);
buttonText.setFillColor(sf::Color::Red);
std::cout << buttonText.getLocalBounds().height << std::endl;
buttonText.setPosition(
    buttonShape.getSize().x/2 - buttonText.getLocalBounds().width/2,
    buttonShape.getSize().y/2 - buttonText.getLocalBounds().height/2
);
buttonTexture.draw(buttonText);

// convert texture to sprite and print
buttonTexture.display();
const sf::Texture& textureButton = buttonTexture.getTexture();
sf::Sprite spriteButton(textureButton);
spriteButton.setPosition(400, 300);
window.draw(spriteButton);




// Version using directly the window object
// button test
sf::IntRect buttonBox = sf::IntRect(400, 300, 200, 100);

// draw box
sf::RectangleShape buttonShape = sf::RectangleShape(
    sf::Vector2f(buttonBox.width, buttonBox.height)
);
buttonShape.setFillColor(sf::Color::Yellow);
buttonShape.setPosition(
    buttonBox.left,
    buttonBox.top
);
window.draw(buttonShape);

// draw text
sf::Text buttonText;
buttonText.setFont(font);
buttonText.setString("BUTTON");
buttonText.setCharacterSize(24);
buttonText.setFillColor(sf::Color::Red);
buttonText.setPosition(
    buttonBox.left + buttonBox.width/2 - buttonText.getLocalBounds().width/2,
    buttonBox.top + buttonBox.height/2 - buttonText.getLocalBounds().height/2
);
window.draw(buttonText);




// UIObject z-based comparator
bool UIObject::operator <(const UIObject & obj) const
{
    return this->z < obj.z;
}